// Venom Modules (c) 2022 Dave Benham
// Licensed under GNU GPLv3

#include "plugin.hpp"
#include "math.hpp"
#include <cfloat>

#define MODULE_NAME ShapedVCA

struct ShapedVCA : VenomModule {
  enum ParamId {
    RANGE_PARAM,
    MODE_PARAM,
    CLIP_PARAM,
    OVER_PARAM,
    OFFSET_PARAM,
    LEVEL_PARAM,
    BIAS_PARAM,
    CURVE_PARAM,
    PARAMS_LEN
  };
  enum InputId {
    LEVEL_INPUT,
    CURVE_INPUT,
    LEFT_INPUT,
    RIGHT_INPUT,
    INPUTS_LEN
  };
  enum OutputId {
    LEFT_OUTPUT,
    RIGHT_OUTPUT,
    OUTPUTS_LEN
  };
  enum LightId {
    LIGHTS_LEN
  };

  ShapedVCA() {
    venomConfig(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN, LIGHTS_LEN);
    configSwitch(RANGE_PARAM, 0.f, 5.f, 0.f, "Level Range", {"0-1", "0-2", "0-10", "+/- 1", "+/- 2", "+/- 10"});
    configSwitch(MODE_PARAM, 0.f, 1.f, 0.f, "VCA Mode", {"Unipolar clipped CV (2 quadrant)", "Bipolar unclipped CV (4 quadrant)"});
    configSwitch(CLIP_PARAM, 0.f, 2.f, 0.f, "Output Clipping", {"Off", "Hard clip", "Soft clip"});
    configSwitch(OVER_PARAM, 0.f, 2.f, 0.f, "Oversample", {"Off", "x4", "x8"});
    configParam(LEVEL_PARAM, 0.f, 1.f, 1.f, "Level");
    configInput(LEVEL_INPUT, "Level CV");
    configParam(BIAS_PARAM, 0.f, 5.f, 0.f, "Level CV bias", " V");
    configParam(CURVE_PARAM, -1.f, 1.f, 0.f, "Response curve");
    configInput(CURVE_INPUT, "Response curve");
    configInput(LEFT_INPUT, "Left");
    configInput(RIGHT_INPUT, "Right");
    configOutput(LEFT_OUTPUT, "Left");
    configOutput(RIGHT_OUTPUT, "Right");
    configSwitch(OFFSET_PARAM, 0.f, 1.f, 0.f, "Output offset", {"None", "-5 V"});
    configBypass(LEFT_INPUT, LEFT_OUTPUT);
    configBypass(inputs[RIGHT_INPUT].isConnected() ? RIGHT_INPUT : LEFT_INPUT, RIGHT_OUTPUT);
  }

  void onPortChange(const PortChangeEvent& e) override {
    if (e.type == Port::INPUT && e.portId == RIGHT_INPUT)
      bypassRoutes[1].inputId = e.connecting ? RIGHT_INPUT : LEFT_INPUT;
  }

  void process(const ProcessArgs& args) override {
    VenomModule::process(args);
    int channels = std::max({1, inputs[LEVEL_INPUT].getChannels(), inputs[CURVE_INPUT].getChannels(), inputs[LEFT_INPUT].getChannels(), inputs[RIGHT_INPUT].getChannels()});
    float level = params[LEVEL_PARAM].getValue();
    float curve = params[CURVE_PARAM].getValue();
    using float_4 = simd::float_4;
    float_4 gain, shape, left, right;
    for( int c=0; c<channels; c+=4){
      shape = clamp(inputs[CURVE_INPUT].getNormalPolyVoltageSimd<float_4>(0.f, c)/10.f + curve, -1.f, 1.f);
      gain = clamp(inputs[LEVEL_INPUT].getNormalPolyVoltageSimd<float_4>(10.f, c)/10.f);
      gain = crossfade(gain, ifelse(shape>0.f, 11.f*gain/(10.f*gain+1.f), simd::pow(gain,4)), ifelse(shape>0.f, shape, -shape));
      left = inputs[LEFT_INPUT].getNormalPolyVoltageSimd<float_4>(10.f, c);
      right = inputs[RIGHT_INPUT].getNormalPolyVoltageSimd<float_4>(left, c) * gain * level;
      left *= gain * level;
      outputs[LEFT_OUTPUT].setVoltageSimd(left, c);
      outputs[RIGHT_OUTPUT].setVoltageSimd(right, c);
    }  
    outputs[LEFT_OUTPUT].setChannels(channels);
    outputs[RIGHT_OUTPUT].setChannels(channels);
  }

};

struct ShapedVCAWidget : VenomWidget {
  
  struct RangeSwitch : GlowingSvgSwitchLockable {
    RangeSwitch() {
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallYellowButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallGreenButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallBlueButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallPinkButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallOrangeButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallPurpleButtonSwitch.svg")));
    }
  };

  struct ModeSwitch : GlowingSvgSwitchLockable {
    ModeSwitch() {
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallOffButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallWhiteButtonSwitch.svg")));
    }
  };

  struct ClipSwitch : GlowingSvgSwitchLockable {
    ClipSwitch() {
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallOffButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallYellowButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallOrangeButtonSwitch.svg")));
    }
  };

  struct OverSwitch : GlowingSvgSwitchLockable {
    OverSwitch() {
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallOffButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallLightBlueButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallBlueButtonSwitch.svg")));
    }
  };

  struct OffsetSwitch : GlowingSvgSwitchLockable {
    OffsetSwitch() {
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallOffButtonSwitch.svg")));
      addFrame(Svg::load(asset::plugin(pluginInstance,"res/smallRedButtonSwitch.svg")));
    }
  };

  ShapedVCAWidget(ShapedVCA* module) {
    setModule(module);
    setVenomPanel("ShapedVCA");
    addParam(createLockableParamCentered<RoundBlackKnobLockable>(Vec(22.5f,73.f), module, ShapedVCA::LEVEL_PARAM));
    addParam(createLockableParamCentered<RangeSwitch>(Vec(6.727f,41.f), module, ShapedVCA::RANGE_PARAM));
    addParam(createLockableParamCentered<ModeSwitch>(Vec(17.243f,41.f), module, ShapedVCA::MODE_PARAM));
    addParam(createLockableParamCentered<ClipSwitch>(Vec(27.758f,41.f), module, ShapedVCA::CLIP_PARAM));
    addParam(createLockableParamCentered<OverSwitch>(Vec(38.274f,41.f), module, ShapedVCA::OVER_PARAM));
    addInput(createInputCentered<PJ301MPort>(Vec(22.5f,106.5f), module, ShapedVCA::LEVEL_INPUT));
    addParam(createLockableParamCentered<TrimpotLockable>(Vec(22.5f,138.5f), module, ShapedVCA::BIAS_PARAM));
    addParam(createLockableParamCentered<RoundSmallBlackKnobLockable>(Vec(22.5f,172.f), module, ShapedVCA::CURVE_PARAM));
    addInput(createInputCentered<PJ301MPort>(Vec(22.5f,202.5f), module, ShapedVCA::CURVE_INPUT));
    addInput(createInputCentered<PJ301MPort>(Vec(22.5f,240.f), module, ShapedVCA::LEFT_INPUT));
    addInput(createInputCentered<PJ301MPort>(Vec(22.5f,270.f), module, ShapedVCA::RIGHT_INPUT));
    addOutput(createOutputCentered<PJ301MPort>(Vec(22.5f,309.f), module, ShapedVCA::LEFT_OUTPUT));
    addOutput(createOutputCentered<PJ301MPort>(Vec(22.5f,339.f), module, ShapedVCA::RIGHT_OUTPUT));
    addParam(createLockableParamCentered<OffsetSwitch>(Vec(37.531f,326.013f), module, ShapedVCA::OFFSET_PARAM));
  }

};

Model* modelShapedVCA = createModel<ShapedVCA, ShapedVCAWidget>("ShapedVCA");
